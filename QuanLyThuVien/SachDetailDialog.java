package QuanLyThuVien;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files; // Import Files
import java.nio.file.StandardCopyOption; // Import StandardCopyOption
import javax.swing.JFileChooser; // Import JFileChooser
import javax.swing.JOptionPane; // Import JOptionPane

public class SachDetailDialog extends JDialog {

    private Sach sach;
    // Khai b√°o SachDAO ƒë·ªÉ d√πng trong h√†m t·∫£i file
    private SachDAO sachDAO;
    // C√≥ th·ªÉ th√™m TacGiaDAO n·∫øu mu·ªën l·∫•y th√¥ng tin chi ti·∫øt h∆°n
    // private TacGiaDAO tacGiaDAO;

    public SachDetailDialog(Frame parent, Sach sach) {
        super(parent, "Chi Ti·∫øt S√°ch", true); // true = modal
        this.sach = sach;
        this.sachDAO = new SachDAO(); // Kh·ªüi t·∫°o SachDAO ·ªü ƒë√¢y
        // Kh·ªüi t·∫°o TacGiaDAO n·∫øu c·∫ßn
        // this.tacGiaDAO = new TacGiaDAO();

        initUI();

        setSize(800, 600); // K√≠ch th∆∞·ªõc c·ª≠a s·ªï chi ti·∫øt
        setLocationRelativeTo(parent);
    }

    private void initUI() {
        JPanel mainPanel = new JPanel(new BorderLayout(15, 15));
        mainPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));

        // --- 1. TI√äU ƒê·ªÄ (T√äN S√ÅCH) - NORTH ---
        JLabel lblTenSach = new JLabel(sach.getTenSach(), SwingConstants.CENTER);
        lblTenSach.setFont(new Font("Segoe UI", Font.BOLD, 24));
        mainPanel.add(lblTenSach, BorderLayout.NORTH);

        // --- 2. ·∫¢NH B√åA - WEST ---
        JPanel coverPanel = new JPanel(new BorderLayout());
        coverPanel.setPreferredSize(new Dimension(250, 350)); // K√≠ch th∆∞·ªõc l·ªõn h∆°n cho ·∫£nh
        JLabel lblAnhBia = new JLabel();
        lblAnhBia.setHorizontalAlignment(SwingConstants.CENTER);
        lblAnhBia.setVerticalAlignment(SwingConstants.CENTER);

        // --- C·∫£i thi·ªán logic t·∫£i ·∫£nh ---
        String duongDanAnh = sach.getDuongDanAnh();
        if (duongDanAnh != null && !duongDanAnh.isEmpty()) {
            try {
                // Th·ª≠ ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi tr∆∞·ªõc
                File imgFile = new File(duongDanAnh);
                // N·∫øu kh√¥ng t·ªìn t·∫°i, th·ª≠ ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi d·ª±a tr√™n th∆∞ m·ª•c ch·∫°y
                if (!imgFile.exists()) {
                     imgFile = new File(System.getProperty("user.dir"), duongDanAnh);
                }

                if (imgFile.exists()) {
                    ImageIcon icon = new ImageIcon(imgFile.getAbsolutePath());
                    // Ch·ªânh k√≠ch th∆∞·ªõc ·∫£nh v·ª´a v·ªõi panel
                    Image image = icon.getImage().getScaledInstance(240, 340, Image.SCALE_SMOOTH);
                    lblAnhBia.setIcon(new ImageIcon(image));
                } else {
                     // Log l·ªói ho·∫∑c hi·ªÉn th·ªã th√¥ng b√°o r√µ h∆°n
                     System.err.println("Kh√¥ng t√¨m th·∫•y file ·∫£nh: " + duongDanAnh + " ho·∫∑c " + imgFile.getAbsolutePath());
                     lblAnhBia.setText("·∫¢nh kh√¥ng t·ªìn t·∫°i");
                     lblAnhBia.setForeground(Color.RED);
                }
            } catch (Exception e) {
                lblAnhBia.setText("[L·ªói t·∫£i ·∫£nh]");
                 lblAnhBia.setForeground(Color.RED);
                e.printStackTrace();
            }
        } else {
            lblAnhBia.setText("[Kh√¥ng c√≥ ·∫£nh b√¨a]");
        }
        coverPanel.add(lblAnhBia, BorderLayout.CENTER);
        mainPanel.add(coverPanel, BorderLayout.WEST);
        // --- K·∫øt th√∫c c·∫£i thi·ªán logic t·∫£i ·∫£nh ---

        // --- 3. TH√îNG TIN CHI TI·∫æT - CENTER ---
        JPanel detailPanel = new JPanel();
        // D√πng BoxLayout ƒë·ªÉ x·∫øp c√°c m·ª•c theo chi·ªÅu d·ªçc
        detailPanel.setLayout(new BoxLayout(detailPanel, BoxLayout.Y_AXIS));

        // --- S·ª¨A C√ÅCH L·∫§Y T√äN T√ÅC GI·∫¢ ---
        // L·∫•y t√™n t√°c gi·∫£ t·ª´ maTacGia (v√¨ ta ƒëang l∆∞u t√™n v√†o ƒë√≥)
        String tenTacGiaDisplay = sach.getMaTacGia();
        // TODO (N√¢ng cao): N·∫øu c√≥ TacGiaDAO v√† mu·ªën hi·ªÉn th·ªã t√™n th·∫≠t t·ª´ b·∫£ng TACGIA:
        // TacGiaDAO tacGiaDAO = new TacGiaDAO();
        // TacGia tacGiaObj = tacGiaDAO.getTacGiaByMa(sach.getMaTacGia());
        // if (tacGiaObj != null) tenTacGiaDisplay = tacGiaObj.getTenTacGia();
        detailPanel.add(createInfoRow("T√°c gi·∫£:", tenTacGiaDisplay));
        // --- K·∫æT TH√öC S·ª¨A ---

        detailPanel.add(Box.createVerticalStrut(5)); // Kho·∫£ng c√°ch nh·ªè
        detailPanel.add(createInfoRow("Nh√† xu·∫•t b·∫£n:", sach.getNhaXuatBan()));
        detailPanel.add(Box.createVerticalStrut(5));
        detailPanel.add(createInfoRow("NƒÉm xu·∫•t b·∫£n:", sach.getNamXuatBan() > 0 ? String.valueOf(sach.getNamXuatBan()) : "N/A"));
        detailPanel.add(Box.createVerticalStrut(5));
        detailPanel.add(createInfoRow("S·ªë l∆∞·ª£ng c√≤n:", String.valueOf(sach.getSoLuong())));
        detailPanel.add(Box.createVerticalStrut(5));
        detailPanel.add(createInfoRow("M√£ s√°ch:", sach.getMaSach()));
         detailPanel.add(Box.createVerticalStrut(5));
        detailPanel.add(createInfoRow("L∆∞·ª£t xem:", String.valueOf(sach.getLuotXem())));
        detailPanel.add(Box.createVerticalStrut(5));
        detailPanel.add(createInfoRow("L∆∞·ª£t t·∫£i:", String.valueOf(sach.getLuotTai())));
        detailPanel.add(Box.createVerticalStrut(15)); // Kho·∫£ng c√°ch l·ªõn h∆°n tr∆∞·ªõc T√≥m t·∫Øt

        // T√≥m t·∫Øt (M√¥ t·∫£)
        JLabel lblTomTatTitle = new JLabel("T√≥m t·∫Øt:");
        lblTomTatTitle.setFont(new Font("Segoe UI", Font.BOLD, 14));
        lblTomTatTitle.setAlignmentX(Component.LEFT_ALIGNMENT);
        detailPanel.add(lblTomTatTitle);

        JTextArea txtMoTa = new JTextArea(sach.getMoTa() != null ? sach.getMoTa() : "[Ch∆∞a c√≥ m√¥ t·∫£]");
        txtMoTa.setEditable(false);
        txtMoTa.setLineWrap(true);
        txtMoTa.setWrapStyleWord(true);
        txtMoTa.setBackground(detailPanel.getBackground()); // M√†u n·ªÅn gi·ªëng panel
        JScrollPane scrollMoTa = new JScrollPane(txtMoTa);
        scrollMoTa.setAlignmentX(Component.LEFT_ALIGNMENT);
        // ƒê·∫∑t k√≠ch th∆∞·ªõc t·ªëi ƒëa ƒë·ªÉ JTextArea kh√¥ng qu√° l·ªõn
        scrollMoTa.setMaximumSize(new Dimension(Integer.MAX_VALUE, 200));
        detailPanel.add(scrollMoTa);

        mainPanel.add(detailPanel, BorderLayout.CENTER);

        // --- 4. T·ªÜP ƒê·ªåC TH·ª¨ - SOUTH ---
        String duongDanXemTruoc = sach.getDuongDanXemTruoc();
        if (duongDanXemTruoc != null && !duongDanXemTruoc.isEmpty()) {
            JPanel previewPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
            previewPanel.setBorder(BorderFactory.createTitledBorder("T·ªáp ƒë·ªçc th·ª≠"));

            // L·∫•y t√™n file t·ª´ ƒë∆∞·ªùng d·∫´n
            File previewFile = new File(duongDanXemTruoc);
            JLabel lblFileName = new JLabel(previewFile.getName());

            JButton btnOpenPreview = new JButton("üìñ M·ªü ƒë·ªçc th·ª≠");
            btnOpenPreview.addActionListener(e -> moFileXemTruoc(previewFile));
            JButton btnDownloadPreview = new JButton("üíæ T·∫£i xu·ªëng");
            btnDownloadPreview.addActionListener(e -> taiFileXemTruoc(previewFile, sach.getMaSach()));


            previewPanel.add(lblFileName);
            previewPanel.add(btnOpenPreview);
            previewPanel.add(btnDownloadPreview);
            mainPanel.add(previewPanel, BorderLayout.SOUTH);
        }

        add(mainPanel);
    }

    /**
     * H√†m ti·ªán √≠ch t·∫°o m·ªôt h√†ng th√¥ng tin (Label: Value)
     */
    private JPanel createInfoRow(String labelText, String valueText) {
        JPanel rowPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        rowPanel.setAlignmentX(Component.LEFT_ALIGNMENT); // Quan tr·ªçng cho BoxLayout

        JLabel label = new JLabel(labelText);
        label.setFont(new Font("Segoe UI", Font.BOLD, 14));
        label.setPreferredSize(new Dimension(120, 20)); // C·ªë ƒë·ªãnh chi·ªÅu r·ªông Label

        // X·ª≠ l√Ω gi√° tr·ªã null ho·∫∑c r·ªóng
        JLabel value = new JLabel( (valueText != null && !valueText.isEmpty()) ? valueText : "N/A");
        value.setFont(new Font("Segoe UI", Font.PLAIN, 14));

        rowPanel.add(label);
        rowPanel.add(value);

        // ƒê·∫∑t k√≠ch th∆∞·ªõc t·ªëi ƒëa ƒë·ªÉ kh·ªõp BoxLayout
        rowPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, rowPanel.getPreferredSize().height));
        return rowPanel;
    }

    /**
     * M·ªü file xem tr∆∞·ªõc (PDF) b·∫±ng ·ª©ng d·ª•ng m·∫∑c ƒë·ªãnh c·ªßa h·ªá th·ªëng
     */
    private void moFileXemTruoc(File fileToOpen) {
         // Th·ª≠ ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi tr∆∞·ªõc
         File originalFile = fileToOpen; // Gi·ªØ l·∫°i ƒë∆∞·ªùng d·∫´n g·ªëc ƒë·ªÉ th√¥ng b√°o l·ªói
         if (!fileToOpen.exists()) {
             // N·∫øu kh√¥ng t·ªìn t·∫°i, th·ª≠ ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi d·ª±a tr√™n th∆∞ m·ª•c ch·∫°y
             File absoluteFile = new File(System.getProperty("user.dir"), fileToOpen.getPath());
             if (!absoluteFile.exists()) {
                 JOptionPane.showMessageDialog(this, "L·ªói: File ƒë·ªçc th·ª≠ kh√¥ng t·ªìn t·∫°i.\nƒê√£ ki·ªÉm tra:\n1. " + originalFile.getPath() + "\n2. " + absoluteFile.getAbsolutePath(), "Kh√¥ng t√¨m th·∫•y file", JOptionPane.ERROR_MESSAGE);
                 return;
             }
             fileToOpen = absoluteFile; // D√πng ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi n·∫øu t√¨m th·∫•y
         }

        // Ki·ªÉm tra xem Desktop c√≥ ƒë∆∞·ª£c h·ªó tr·ª£ kh√¥ng
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().open(fileToOpen);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Kh√¥ng th·ªÉ m·ªü file ƒë·ªçc th·ª≠.\nL·ªói: " + ex.getMessage(), "L·ªói m·ªü file", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } catch (SecurityException ex) {
                 JOptionPane.showMessageDialog(this, "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p file ƒë·ªçc th·ª≠.\nL·ªói: " + ex.getMessage(), "L·ªói b·∫£o m·∫≠t", JOptionPane.ERROR_MESSAGE);
                 ex.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(this, "T√≠nh nƒÉng m·ªü file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ tr√™n h·ªá th·ªëng n√†y.", "L·ªói h·ªá th·ªëng", JOptionPane.WARNING_MESSAGE);
        }
    }

     /**
      * T·∫£i file xem tr∆∞·ªõc v·ªÅ m√°y ng∆∞·ªùi d√πng.
      */
     private void taiFileXemTruoc(File fileToDownload, String maSach) {
         // Th·ª≠ ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi tr∆∞·ªõc
         File originalFile = fileToDownload; // Gi·ªØ l·∫°i ƒë∆∞·ªùng d·∫´n g·ªëc ƒë·ªÉ th√¥ng b√°o l·ªói
         if (!fileToDownload.exists()) {
             // N·∫øu kh√¥ng t·ªìn t·∫°i, th·ª≠ ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi
             File absoluteFile = new File(System.getProperty("user.dir"), fileToDownload.getPath());
             if (!absoluteFile.exists()) {
                 JOptionPane.showMessageDialog(this, "L·ªói: File ƒë·ªçc th·ª≠ kh√¥ng t·ªìn t·∫°i ƒë·ªÉ t·∫£i v·ªÅ.\nƒê√£ ki·ªÉm tra:\n1. " + originalFile.getPath() + "\n2. " + absoluteFile.getAbsolutePath(), "Kh√¥ng t√¨m th·∫•y file", JOptionPane.ERROR_MESSAGE);
                 return;
             }
             fileToDownload = absoluteFile; // D√πng ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi n·∫øu t√¨m th·∫•y
         }

         JFileChooser fileChooser = new JFileChooser();
         fileChooser.setDialogTitle("L∆∞u file ƒë·ªçc th·ª≠");
         // ƒê·∫∑t t√™n file m·∫∑c ƒë·ªãnh khi l∆∞u
         fileChooser.setSelectedFile(new File(fileToDownload.getName()));

         int userSelection = fileChooser.showSaveDialog(this);

         if (userSelection == JFileChooser.APPROVE_OPTION) {
             File fileToSave = fileChooser.getSelectedFile();

             // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ch·ªçn ghi ƒë√® file ƒë√£ t·ªìn t·∫°i kh√¥ng
             if (fileToSave.exists()) {
                 int overwrite = JOptionPane.showConfirmDialog(this,
                         "File '" + fileToSave.getName() + "' ƒë√£ t·ªìn t·∫°i.\nB·∫°n c√≥ mu·ªën ghi ƒë√® kh√¥ng?",
                         "X√°c nh·∫≠n ghi ƒë√®", JOptionPane.YES_NO_OPTION);
                 if (overwrite == JOptionPane.NO_OPTION) {
                     return; // H·ªßy n·∫øu kh√¥ng mu·ªën ghi ƒë√®
                 }
             }

             try {
                 // Copy file
                 Files.copy(fileToDownload.toPath(), fileToSave.toPath(), StandardCopyOption.REPLACE_EXISTING);
                 // TƒÉng l∆∞·ª£t t·∫£i (n·∫øu th√†nh c√¥ng)
                 // C·∫ßn ƒë·∫£m b·∫£o sachDAO ƒë∆∞·ª£c kh·ªüi t·∫°o
                 if (sachDAO != null) {
                    sachDAO.tangLuotTai(maSach);
                 } else {
                    // Log l·ªói n·∫øu sachDAO l√† null (kh√¥ng n√™n x·∫£y ra n·∫øu kh·ªüi t·∫°o trong constructor)
                    System.err.println("L·ªói nghi√™m tr·ªçng: sachDAO ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o trong SachDetailDialog khi c·ªë g·∫Øng tƒÉng l∆∞·ª£t t·∫£i.");
                 }
                 JOptionPane.showMessageDialog(this, "T·∫£i file th√†nh c√¥ng!\nƒê√£ l∆∞u t·∫°i: " + fileToSave.getAbsolutePath(), "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
             } catch (IOException ex) {
                 JOptionPane.showMessageDialog(this, "L·ªói khi l∆∞u file: " + ex.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
                 ex.printStackTrace();
             } catch (SecurityException secEx) {
                  JOptionPane.showMessageDialog(this, "Kh√¥ng c√≥ quy·ªÅn ghi file v√†o v·ªã tr√≠ ƒë√£ ch·ªçn.\nL·ªói: " + secEx.getMessage(), "L·ªói quy·ªÅn ghi", JOptionPane.ERROR_MESSAGE);
                 secEx.printStackTrace();
             }
         }
     }
}

